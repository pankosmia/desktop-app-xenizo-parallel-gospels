name: Linux x64 Build

on:
  workflow_call:
    inputs:
      runner:
        description: 'The GitHub runner to use (e.g., ubuntu-20.04, ubuntu-22.04)'
        required: true
        type: string
    outputs:
      tgz-name:
        description: "Name of the generated TGZ file"
        value: ${{ jobs.build.outputs.tgz-name }}

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    outputs:
      tgz-name: ${{ steps.get-tgz-name.outputs.tgz-name }}
    
    # Set process.env.CI to false to prevent treating warnings as errors
    env:
      CI: false

    steps:
      # Turn off re-runs
      - name: No re-runs please
        run: |
         if [ "$GITHUB_RUN_ATTEMPT" -gt 1 ]; then
            echo "No re-runs. They use the commit SHA and git ref of the original event that triggered the workflow run. However, that does not extend to client and resource repos which may expect a more recent panksomia-web."
            echo "Start a new workflow run instead."
            exit 1
          else
            echo "NOT a re-run"
          fi

      # Rust
      - name: Set up Rust
        id: set-up-rust
        uses: moonrepo/setup-rust@v1
        timeout-minutes: 15  # Adjust the value as needed

      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Specify node.js version
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'

      # Install the repository
      - name: Install this repo
        run: npm install

      # Grant execute permissions for the shell and bash scripts
      - name: Make scripts executable
        run: |
          chmod +x ./linux/scripts/app_setup.bsh
          chmod +x ./linux/scripts/clone.bsh
          chmod +x ./linux/scripts/build_clients.bsh
          chmod +x ./linux/scripts/build_server.bsh
          chmod +x ./linux/scripts/bundle_tgz.bsh

      - name: Run app_setup.bsh
        working-directory: ./linux/scripts
        run: ./app_setup.bsh

      - name: Run clone.bsh
        working-directory: ./linux/scripts
        run: ./clone.bsh

      - name: Build clients
        working-directory: ./linux/scripts
        run: ./build_clients.bsh

      - name: Build server without clean and assemble build environment
        working-directory: ./linux/scripts
        run: ./build_server.bsh -c

      - name: Bundle tgz without asking if the server is off and indicate GHA
        working-directory: ./linux/scripts
        run: ./bundle_tgz.bsh -s -g

      - name: Get tgz for terminal names
        id: get-tgz-name
        run: |
          echo "tgz for terminal name:"
          ls -als ./releases/linux/*.tgz
          cd ./releases/linux
          TGZ_NAME=$(ls *.tgz | head -n 1)
          echo "tgz-name=$TGZ_NAME" >> $GITHUB_OUTPUT
          echo "TGZ_NAME=$TGZ_NAME" >> $GITHUB_ENV
          cd ../..

      - name: Upload tgz for terminal artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TGZ_NAME }}
          path: ./releases/linux/${{ env.TGZ_NAME }}
          if-no-files-found: error
          retention-days: 90