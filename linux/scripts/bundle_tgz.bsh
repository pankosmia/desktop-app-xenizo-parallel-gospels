#!/usr/bin/env bash

# This script uses the APP_VERSION environment variable as defined in app_config.env

# run from pankosmia\[this-repo's-name]/linux/scripts directory by: ./bundle_tgz.bsh

set -e
set -u

echo;

# Do not ask if the server is off if the -s positional argument is provided in either #1 or #2
# Github Actions specified if the -g positional argument is provided in either #1 or #2
while [[ "$#" -gt 0 ]]
  do case $1 in
      -s) askIfOff="$1"  # -s = "no"
      ;;
      -g) isGHA="$1" # -g = "yes"
  esac
  shift
done

# Assign default value if -s is not present
if [ -z ${askIfOff+x} ]; then # askIfOff is unset"
  askIfOff=-yes
fi

# Assign default value if -g is not present
if [ -z ${isGHA+x} ]; then # isGHA is unset
  isGHA=-no
fi 

if ! [[ $askIfOff =~ ^(-s) ]]; then
  while true; do
    read -p "Is the server off? [Y/N y/n]: " yn
    case $yn in 
      [yY] ) echo "Continuing...";
        break
        ;;
      [nN] ) echo;
        echo "     Exiting...";
        echo;
        echo "     If the server is on, turn it off with Ctrl-C in the terminal window in which it is running, then re-run this script.";
        echo;
        exit
        ;;
      * ) echo;
        echo "     \"$yn\" is not a valid response. Please enter a Y or y for yes, or an N or n for no.";
        echo
        ;;
    esac
  done
fi

if ! [[ $isGHA =~ ^(-g) ]]; then
  if [ ! -f ../../local_server/target/release/local_server ]; then
    echo
    echo "   ***************************************************************"
    echo "   * IMPORTANT: Build the local server, then re-run this script! *"
    echo "   ***************************************************************"
    echo
    exit
  fi
  cd ../../
  if [ $(ls releases/linux/*.tgz 2>/dev/null | wc -l) -gt 0 ]; then
    echo "A previous linux .tgz release exists. Removing..."
    rm releases/linux/*.tgz
  fi
  echo "checkout main"
  git checkout main &> /dev/null
  echo "pull"
  git pull
  echo "npm install"
  npm install
  cd linux/scripts
  echo
  echo "Running app_setup to ensure version number consistency between buildSpec.json and this build bundle:"
  ./app_setup.bsh
fi

source ../../app_config.env
echo
echo "Version is $APP_VERSION"
echo

if ! [[ $isGHA =~ ^(-g) ]]; then
  if [ -f ../build ]; then
    echo "Removing last build environment"
    rm -rf ../build
  fi
  echo "Assembling build environment"
  node build.js
fi

echo
echo "   **********************************"
echo "   *                                *"
echo "   *           ====                 *"
echo "   * Bundling. Wait for the prompt. *"
echo "   *           ====                 *"
echo "   *                                *"
echo "   **********************************"
echo
cd ../build
# Use lower case app name in filename
APP_NAME=${APP_NAME,,}
# Replace spaces with a dash (-) in filename
APP_NAME=${APP_NAME// /-}
# Make executable and compress
chmod +x $APP_NAME
tar cfz ../../releases/linux/$APP_NAME-linux-$APP_VERSION.tgz .
cd ../scripts
